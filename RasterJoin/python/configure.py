import os
import sipconfig
import sys
from distutils import sysconfig
from PyQt5.QtCore import PYQT_CONFIGURATION as pyqt_config
import numpy as np  

# https://github.com/jazzycamel/PyMyLabel/blob/master/configure.py

class HostPythonConfiguration(object):
    def __init__(self):
        self.platform=sys.platform
        self.version=sys.hexversion>>8

        self.inc_dir=sysconfig.get_python_inc()
        self.venv_inc_dir=sysconfig.get_python_inc(prefix=sys.prefix)
        self.module_dir=sysconfig.get_python_lib(plat_specific=1)

        if sys.platform=='win32':
            self.data_dir=sys.prefix
            self.lib_dir=sys.prefix+'\\libs'
        else:
            self.data_dir=sys.prefix+'/share'
            self.lib_dir=sys.prefix+'/lib'


class TargetQtConfiguration(object):
    def __init__(self, qmake):
        pipe=os.popen(' '.join([qmake, '-query']))

        for l in pipe:
            l=l.strip()

            tokens=l.split(':', 1)
            if isinstance(tokens, list):
                if len(tokens) != 2:
                    error("Unexpected output from qmake: '%s'\n" % l)

                name,value=tokens
            else:
                name=tokens
                value=None

            name=name.replace('/', '_')
            setattr(self, name, value)

        pipe.close()  


if __name__=="__main__":
    from argparse import ArgumentParser

    parser=ArgumentParser(description="Configure PyMyLabel module.")
    parser.add_argument(
        '-q', '--qmake',
        dest="qmake",
        type=str,
        default="qmake",
        help="Path to qmake executable"
    )
    parser.add_argument(
        '-r', '--rasterjoin-build',
        dest="raster_build",
        type=str,
        default="../../build-RasterJoin-Desktop_Qt_5_12_1_GCC_64bit-Release/",
        help="Raster join build folder"
    )


    args=parser.parse_args()

    # The name of the SIP build file generated by SIP and used by the build system.
    dest_pkg_dir="rasterjoin"
    sip_files_dir=os.path.abspath(".")
    output_dir =os.path.abspath(os.path.join(".", "modules"))
    build_file = "rasterjoin.sbf"
    build_path = os.path.join(output_dir, build_file)
    inc_dir = os.path.abspath("../api")

    pyconfig=HostPythonConfiguration()
    py_sip_dir=os.path.join(pyconfig.data_dir, 'sip', 'PyQt5')

    if not os.path.exists(output_dir): os.mkdir(output_dir)
    sip_file = os.path.join(sip_files_dir, "rasterjoin.sip")

    # Get the SIP configuration information.
    config = sipconfig.Configuration()

    # Run SIP to generate the code.
    cmd = " ".join([
        config.sip_bin, 
        pyqt_config['sip_flags'],
        "-I", sip_files_dir,
        "-I", py_sip_dir,
        "-c", output_dir, 
        "-b", build_path, 
        "-w", 
        "-o",
        sip_file])

    print(cmd)
    if os.system(cmd)!=0: sys.exit(1)

    ## Need for older Qt 5.10.x on windows
    # macros = config.build_macros()
    # val = macros['CFLAGS'].replace("-Zc:wchar_t-","")
    # macros['CFLAGS'] = val
    # val = macros['CXXFLAGS'].replace("-Zc:wchar_t-","")
    # macros['CXXFLAGS'] = val
    # config.set_build_macros(macros)

    # Create the Makefile.
    makefile = sipconfig.SIPModuleMakefile(
            config,
            build_file,
            dir=output_dir,
            install_dir=dest_pkg_dir,
            static=0
    )

    # Add the li)brary we are wrapping.  The name doesn't include any platform
    # specific prefixes or extensions (e.g. the "lib" prefix on UNIX, or the
    # ".dll" extension on Windows).
    qmake_exe = args.qmake
    raster_build = args.raster_build
    if sys.platform=='win32':
        # qmake_exe = "C:/Qt/Qt5.12.3/5.12.3/msvc2017_64/bin/qmake.exe"
        linkPath = os.path.join(os.path.abspath(raster_build),"release/api/")
        makefile.extra_libs+=['Qt5Core']
        makefile.extra_defines+=['STATIC_BUILD']
    elif sys.platform=='linux':
        # qmake_exe = "/opt/Qt5.12.1/5.12.1/gcc_64/bin/qmake"    
        linkPath = os.path.join(os.path.abspath(raster_build),"api/")
        makefile.extra_cxxflags+=['-std=c++11']

    qtconfig=TargetQtConfiguration(qmake_exe)
    makefile.extra_include_dirs+=[
        inc_dir, 
        qtconfig.QT_INSTALL_HEADERS, 
        np.get_include(),
        os.path.join(qtconfig.QT_INSTALL_HEADERS, "QtCore"), 
        os.path.join(qtconfig.QT_INSTALL_HEADERS, "QtGui")
        ]
    makefile.extra_defines+=['QT_CORE_LIB', 'QT_GUI_LIB']

    makefile.extra_lib_dirs+=[qtconfig.QT_INSTALL_LIBS, linkPath]
    makefile.extra_libs += ["Rasterjoin"]

    # Generate the Makefile itself.
    makefile.generate()

    sipconfig.ParentMakefile(
            configuration = config,
            subdirs = [output_dir],
    ).generate()
